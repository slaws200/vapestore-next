{
  "Next.js Client Component": {
    "prefix": "nxc",
    "body": [
      "'use client';",
      "",
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "export default function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div className=\"$4\">",
      "      $5",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js client component with TypeScript"
  },
  "Next.js Server Component": {
    "prefix": "nxs",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "export default function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div className=\"$4\">",
      "      $5",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js server component with TypeScript"
  },
  "Next.js Page Component": {
    "prefix": "nxp",
    "body": [
      "import React from 'react';",
      "",
      "export default function ${1:PageName}Page() {",
      "  return (",
      "    <div className=\"min-h-screen p-8\">",
      "      <h1 className=\"text-2xl font-bold mb-4\">${2:Page Title}</h1>",
      "      $3",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js page component"
  },
  "Next.js API Route": {
    "prefix": "nxa",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "export async function GET(request: NextRequest) {",
      "  try {",
      "    $1",
      "    return NextResponse.json({ message: 'Success' });",
      "  } catch (error) {",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const body = await request.json();",
      "    $2",
      "    return NextResponse.json({ message: 'Created' }, { status: 201 });",
      "  } catch (error) {",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Next.js API route with GET and POST handlers"
  },
  "Next.js Form Component": {
    "prefix": "nxf",
    "body": [
      "'use client';",
      "",
      "import React, { useState } from 'react';",
      "",
      "interface ${1:FormName}FormProps {",
      "  onSubmit?: (data: any) => void;",
      "}",
      "",
      "export default function ${1:FormName}Form({ onSubmit }: ${1:FormName}FormProps) {",
      "  const [formData, setFormData] = useState({",
      "    $2",
      "  });",
      "",
      "  const handleSubmit = (e: React.FormEvent) => {",
      "    e.preventDefault();",
      "    onSubmit?.(formData);",
      "  };",
      "",
      "  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {",
      "    const { name, value } = e.target;",
      "    setFormData(prev => ({",
      "      ...prev,",
      "      [name]: value",
      "    }));",
      "  };",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit} className=\"space-y-4\">",
      "      $3",
      "      <button",
      "        type=\"submit\"",
      "        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors\"",
      "      >",
      "        Submit",
      "      </button>",
      "    </form>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js form component with state management"
  },
  "Next.js Modal Component": {
    "prefix": "nxm",
    "body": [
      "'use client';",
      "",
      "import React from 'react';",
      "",
      "interface ${1:ModalName}ModalProps {",
      "  isOpen: boolean;",
      "  onClose: () => void;",
      "  children: React.ReactNode;",
      "}",
      "",
      "export default function ${1:ModalName}Modal({ isOpen, onClose, children }: ${1:ModalName}ModalProps) {",
      "  if (!isOpen) return null;",
      "",
      "  return (",
      "    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">",
      "      <div",
      "        className=\"absolute inset-0 bg-black bg-opacity-50\"",
      "        onClick={onClose}",
      "      />",
      "      <div className=\"relative bg-white rounded-lg p-6 max-w-md w-full mx-4\">",
      "        <button",
      "          onClick={onClose}",
      "          className=\"absolute top-4 right-4 text-gray-400 hover:text-gray-600\"",
      "        >",
      "          âœ•",
      "        </button>",
      "        {children}",
      "      </div>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js modal component"
  },
  "Next.js Button Component": {
    "prefix": "nxb",
    "body": [
      "import React from 'react';",
      "",
      "interface ButtonProps {",
      "  children: React.ReactNode;",
      "  onClick?: () => void;",
      "  variant?: 'primary' | 'secondary' | 'outline';",
      "  size?: 'sm' | 'md' | 'lg';",
      "  disabled?: boolean;",
      "  className?: string;",
      "}",
      "",
      "export default function Button({",
      "  children,",
      "  onClick,",
      "  variant = 'primary',",
      "  size = 'md',",
      "  disabled = false,",
      "  className = ''",
      "}: ButtonProps) {",
      "  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';",
      "  ",
      "  const variantClasses = {",
      "    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',",
      "    secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',",
      "    outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500'",
      "  };",
      "  ",
      "  const sizeClasses = {",
      "    sm: 'px-3 py-1.5 text-sm',",
      "    md: 'px-4 py-2 text-sm',",
      "    lg: 'px-6 py-3 text-base'",
      "  };",
      "  ",
      "  const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`;",
      "  ",
      "  return (",
      "    <button",
      "      onClick={onClick}",
      "      disabled={disabled}",
      "      className={classes}",
      "    >",
      "      {children}",
      "    </button>",
      "  );",
      "}"
    ],
    "description": "Create a reusable Next.js button component"
  },
  "Next.js Card Component": {
    "prefix": "nxcard",
    "body": [
      "import React from 'react';",
      "",
      "interface CardProps {",
      "  children: React.ReactNode;",
      "  className?: string;",
      "  title?: string;",
      "}",
      "",
      "export default function Card({ children, className = '', title }: CardProps) {",
      "  return (",
      "    <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>",
      "      {title && (",
      "        <h3 className=\"text-lg font-semibold mb-4 text-gray-900\">{title}</h3>",
      "      )}",
      "      {children}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a reusable Next.js card component"
  },
  "Next.js Loading Component": {
    "prefix": "nxl",
    "body": [
      "export default function Loading() {",
      "  return (",
      "    <div className=\"flex items-center justify-center min-h-[200px]\">",
      "      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js loading component"
  },
  "Next.js Error Component": {
    "prefix": "nxe",
    "body": [
      "'use client';",
      "",
      "import React from 'react';",
      "",
      "interface ErrorProps {",
      "  error: Error;",
      "  reset: () => void;",
      "}",
      "",
      "export default function Error({ error, reset }: ErrorProps) {",
      "  return (",
      "    <div className=\"flex flex-col items-center justify-center min-h-[400px] p-8\">",
      "      <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Something went wrong!</h2>",
      "      <p className=\"text-gray-600 mb-4 text-center\">{error.message}</p>",
      "      <button",
      "        onClick={reset}",
      "        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors\"",
      "      >",
      "        Try again",
      "      </button>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js error component"
  }
}
